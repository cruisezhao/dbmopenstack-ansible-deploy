    - name: create heat database
      mysql_db: name=heat state=present

    - name: create heat db user and grant priv
      mysql_user: name=heat password={{heat_db_password}} priv=heat.*:ALL host={{item}} state=present
      with_items:
        - "%"
        - localhost

    - name: Create heat service
      shell: |
        export {{admin_openrc}};
        openstack service list|grep heat || openstack service create --name heat --description "Orchestration" orchestration

    - name: Create heat-cfn service
      shell: |
        export {{admin_openrc}}
        openstack service list|grep cloudformation || (openstack service create --name heat-cnf --description "Orchestrtion" cloudformation;)

    - name: Create user,endpoint and add role
      shell: |
        export {{admin_openrc}};
        openstack user create --domain default --password {{heat_password}} heat;
        openstack role add --project service --user heat admin;
        openstack endpoint list | grep 'orchestration.*public' || openstack endpoint create --region RegionOne orchestration public http://controller:8004/v1/%\(tenant_id\)s;
        openstack endpoint list | grep 'orchestration.*internal' || openstack endpoint create --region RegionOne orchestration internal http://controller:8004/v1/%\(tenant_id\)s;
        openstack endpoint list | grep 'orchestration.*admin' || openstack endpoint create --region RegionOne orchestration admin http://controller:8004/v1/%\(tenant_id\)s;
        openstack endpoint list | grep 'cloudformation.*public' || openstack endpoint create --region RegionOne cloudformation public {{cloudformation_service_API_endpoints}};
        openstack endpoint list | grep 'cloudformation.*internal' || openstack endpoint create --region RegionOne cloudformation internal {{cloudformation_service_API_endpoints}};
        openstack endpoint list | grep 'cloudformation.*admin' || openstack endpoint create --region RegionOne cloudformation admin {{cloudformation_service_API_endpoints}};

    - name: Create heat domain
      shell: |
        export {{admin_openrc}};
        openstack domain list|grep heat || openstack domain create --description "Stack projects and users" heat

    - name: Create heat_domain_admin
      shell: |
        export {{admin_openrc}};
        openstack user create --domain heat --password {{heat_password}} heat_domain_admin;
        openstack role add --domain heat --user-domain heat --user heat_domain_admin admin

    - name: Create heat_stack_owner role
      shell: |
        export {{admin_openrc}};
        openstack role list |grep 'heat_stack_owner' || openstack role create heat_stack_owner;
        openstack role add --project demo --user demo heat_stack_owner

    - name: Create heat_stack_user role
      shell: |
        export {{admin_openrc}};
        openstack role list |grep 'heat_stack_user' || openstack role create heat_stack_user

    - name: Install heat
      apt: 
        name: "{{ item }}"
        state: present
      with_items:
        - heat-api 
        - heat-api-cfn 
        - heat-engine

    - name: Replace heat.conf
      template: src=templates/heat.conf.j2 dest=/etc/heat/heat.conf

    - name: Populate heat db
      shell: su -s /bin/sh -c "heat-manage db_sync" heat

    - name: Restart service
      service: 
        name: "{{ item }}"
        state: restarted
        enabled: true
      with_items:
        - heat-api 
        - heat-api-cfn 
        - heat-engine
