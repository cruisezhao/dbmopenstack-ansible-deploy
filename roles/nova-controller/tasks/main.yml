---
- name: Create database nova_api
  mysql_db: name=nova_api state=present
- name: Create database nova
  mysql_db: name=nova state=present
- name: Create database user nova and grant all privileges on database "nova" to user "nova"
  mysql_user: name=nova password={{nova_db_password}} priv=nova.*:ALL host={{item}} state=present
  with_items:
    - "localhost"
    - "%"
- name: Crant all privileges on database "nova_api" to user "nova"
  mysql_user: name=nova password={{nova_db_password}} append_privs=yes priv=nova_api.*:ALL host={{item}} state=present
  with_items:
    - "localhost"
    - "%"
- name: Test if user "nova" already exists
  shell: openstack user list | grep nova
  register: nova_user
  ignore_errors: yes
- name: Create nova user on keystone
  shell: openstack user create --domain default --password {{os_nova_password}} nova
  when: nova_user|failed
- name: Test if the admin role is already add to user "nova"
  shell: openstack role assignment list|awk '{print $4}'|grep "`openstack user list|grep nova|awk '{print $2}'`"
  register: admin_role
  ignore_errors: yes
- name: Add the admin role to user "nova"
  shell: openstack role add --project service --user nova admin
  when: admin_role|failed
- name: Test if the nova service entity is already created
  shell: openstack service list |grep compute
  register: nova_entity
  ignore_errors: yes
- name: Create the nova service entity
  shell: openstack service create --name nova --description "OpenStack Compute" compute
  when: nova_entity|failed 
- name: Test if nova public endpoint already exists
  shell: openstack endpoint list |grep 'nova.*public'
  register: nova_public_endpoint
  ignore_errors: yes
- name: Create nova public endpoint
  shell: openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1/%\(tenant_id\)s
  when: nova_public_endpoint|failed
- name: Test if nova internal endpoint already exists
  shell: openstack endpoint list |grep 'nova.*internal'
  register: nova_internal_endpoint
  ignore_errors: yes
- name: Create nova internal endpoint
  shell: openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1/%\(tenant_id\)s
  when: nova_internal_endpoint|failed
- name: Test if nova admin endpoint already exists
  shell: openstack endpoint list |grep 'nova.*admin'
  register: nova_admin_endpoint
  ignore_errors: yes
- name: Create nova admin endpoint
  shell: openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1/%\(tenant_id\)s
  when: nova_admin_endpoint|failed
- name: Update repository
  apt: update_cache=yes
- name: Install nova-api nova-conductor nova-consoleauth nova-novncproxy nova-scheduler
  apt: name={{item}} state=present
  with_items:
    - nova-api
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
    - nova-scheduler
  register: install_nova
- name: Modify /etc/nova/nova.conf
  template: src="../../../common-templates/controller-nova.conf" dest=/etc/nova/nova.conf
  register: if_modified
- name: Sync api_db and db
  shell: >
         nova-manage api_db sync ;
         nova-manage db sync ;
  become: yes
  become_user: nova
  become_method: sudo
  when: nova_user|failed or admin_role|failed or nova_entity|failed or nova_public_endpoint|failed or nova_internal_endpoint|failed or nova_admin_endpoint|failed or install_nova|changed or if_modified|changed
- name: Restart nova-api nova-consoleauth nova-scheduler nova-conductor nova-novncproxy
  service: name={{item}} state=restarted
  with_items:
    - nova-api
    - nova-consoleauth
    - nova-scheduler
    - nova-conductor
    - nova-novncproxy
  when: nova_user|failed or admin_role|failed or nova_entity|failed or nova_public_endpoint|failed or nova_internal_endpoint|failed or nova_admin_endpoint|failed or install_nova|changed or if_modified|changed
